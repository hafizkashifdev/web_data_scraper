{
    "swagger": "2.0",
    "info": {
        "description": "This specification defines the APIs for a TPP to submit a Software Statement Assertion to an ASPSP for the purpose of creating OAuth clients that are registered with ASPSP.\n",
        "version": "v3.2",
        "title": "DynamicClientRegistrationAPI",
        "termsOfService": "https://www.openbanking.org.uk/terms",
        "contact": {
            "name": "Service Desk",
            "email": "ServiceDesk@openbanking.org.uk"
        },
        "license": {
            "name": "open-licence",
            "url": "https://www.openbanking.org.uk/open-licence"
        }
    },
    "host": "developer.caterallen.co.uk",
    "basePath": "/open-banking/v3.2",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/jose"
    ],
    "produces": [
        "application/json"
    ],
    "security": [
        {
            "default": []
        }
    ],
    "paths": {
        "/register": {
            "post": {
                "tags": [
                    "Client Registration",
                    "Conditional"
                ],
                "summary": "Register a client by way of a Software Statement Assertion",
                "description": "Endpoint will be secured by way of Mutual Authentication over TLS",
                "parameters": [
                    {
                        "in": "body",
                        "name": "requestBody",
                        "description": "A request to register a Software Statement Assertion with an ASPSP",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "OBClientRegistration1"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Client registration",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/OBRegistrationProperties1"
                                },
                                {}
                            ]
                        }
                    },
                    "400": {
                        "description": "Request failed due to client error",
                        "schema": {
                            "$ref": "#/definitions/RegistrationError"
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ],
                "x-auth-type": "None",
                "x-throttling-tier": "Unlimited"
            }
        },
        "/register/{ClientId}": {
            "get": {
                "tags": [
                    "Client Registration",
                    "Optional"
                ],
                "summary": "Get a client by way of Client ID",
                "parameters": [
                    {
                        "name": "ClientId",
                        "in": "path",
                        "description": "The client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "An Authorisation Token as per https://tools.ietf.org/html/rfc6750",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client registration",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/OBRegistrationProperties1"
                                },
                                {}
                            ]
                        }
                    },
                    "401": {
                        "description": "Request failed due to unknown or invalid Client or invalid access token",
                        "headers": {
                            "WWW-Authenticate": {
                                "type": "string",
                                "description": "Response header field specified in https://tools.ietf.org/html/rfc6750",
                                "pattern": "^Bearer .*"
                            }
                        }
                    },
                    "403": {
                        "description": "The client does not have permission to read, update or delete the Client"
                    }
                },
                "security": [
                    {
                        "TPPOAuth2Security": []
                    },
                    {
                        "default": []
                    }
                ],
                "x-auth-type": "Application",
                "x-throttling-tier": "Unlimited"
            },
            "put": {
                "tags": [
                    "Client Registration",
                    "Optional"
                ],
                "summary": "Update a client by way of Client ID",
                "parameters": [
                    {
                        "in": "body",
                        "name": "requestBody",
                        "description": "A request to register a Software Statement Assertion with an ASPSP",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "OBClientRegistration1"
                        }
                    },
                    {
                        "name": "ClientId",
                        "in": "path",
                        "description": "The client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "An Authorisation Token as per https://tools.ietf.org/html/rfc6750",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client registration",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/OBRegistrationProperties1"
                                },
                                {}
                            ]
                        }
                    },
                    "400": {
                        "description": "Request failed due to client error",
                        "schema": {
                            "$ref": "#/definitions/RegistrationError"
                        }
                    },
                    "401": {
                        "description": "Request failed due to unknown or invalid Client or invalid access token",
                        "headers": {
                            "WWW-Authenticate": {
                                "type": "string",
                                "description": "Response header field specified in https://tools.ietf.org/html/rfc6750",
                                "pattern": "^Bearer .*"
                            }
                        }
                    },
                    "403": {
                        "description": "The client does not have permission to read, update or delete the Client"
                    }
                },
                "security": [
                    {
                        "TPPOAuth2Security": []
                    },
                    {
                        "default": []
                    }
                ],
                "x-auth-type": "Application",
                "x-throttling-tier": "Unlimited"
            },
            "delete": {
                "tags": [
                    "Client Registration",
                    "Optional"
                ],
                "summary": "Delete a client by way of Client ID",
                "parameters": [
                    {
                        "name": "ClientId",
                        "in": "path",
                        "description": "The client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "An Authorisation Token as per https://tools.ietf.org/html/rfc6750",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Client deleted"
                    },
                    "401": {
                        "description": "Request failed due to unknown or invalid Client or invalid access token",
                        "headers": {
                            "WWW-Authenticate": {
                                "type": "string",
                                "description": "Response header field specified in https://tools.ietf.org/html/rfc6750",
                                "pattern": "^Bearer .*"
                            }
                        }
                    },
                    "403": {
                        "description": "The client does not have permission to read, update or delete the Client"
                    },
                    "405": {
                        "description": "The client does not have permission to read, update or delete the Client"
                    }
                },
                "security": [
                    {
                        "TPPOAuth2Security": []
                    },
                    {
                        "default": []
                    }
                ],
                "x-auth-type": "Application",
                "x-throttling-tier": "Unlimited"
            }
        }
    },
    "securityDefinitions": {
        "TPPOAuth2Security": {
            "description": "TPP client credential authorisation flow with the ASPSP. No scopes defined as per specification",
            "type": "oauth2",
            "tokenUrl": "https://authserver.example/token",
            "flow": "application",
            "scopes": {
                "accounts": "Ability to read Accounts information",
                "fundsconfirmation": "Ability to confirm funds",
                "payments": "Generic payment scope"
            }
        },
        "default": {
            "type": "oauth2",
            "authorizationUrl": "https://developer.caterallen.co.uk/authorize",
            "flow": "implicit"
        }
    },
    "definitions": {
        "SupportedAlgorithms": {
            "type": "string",
            "enum": [
                "RS256",
                "PS256",
                "ES256"
            ]
        },
        "OBRegistrationProperties1": {
            "type": "object",
            "required": [
                "application_type",
                "grant_types",
                "id_token_signed_response_alg",
                "redirect_uris",
                "request_object_signing_alg",
                "scope",
                "software_statement",
                "token_endpoint_auth_method"
            ],
            "properties": {
                "client_id": {
                    "type": "string",
                    "description": "OAuth 2.0 client identifier string",
                    "minLength": 1,
                    "maxLength": 36
                },
                "client_secret": {
                    "type": "string",
                    "description": "OAuth 2.0 client secret string",
                    "minLength": 1,
                    "maxLength": 36
                },
                "client_id_issued_at": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC",
                    "minimum": 0
                },
                "client_secret_expires_at": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Time at which the client secret will expire expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC. Set to 0 if does not expire",
                    "minimum": 0
                },
                "redirect_uris": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri",
                        "minLength": 1,
                        "maxLength": 256
                    }
                },
                "token_endpoint_auth_method": {
                    "type": "string",
                    "enum": [
                        "private_key_jwt",
                        "client_secret_jwt",
                        "client_secret_basic",
                        "client_secret_post",
                        "tls_client_auth"
                    ]
                },
                "grant_types": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "client_credentials",
                            "authorization_code",
                            "refresh_token"
                        ]
                    },
                    "minItems": 1
                },
                "response_types": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "code",
                            "code id_token"
                        ]
                    }
                },
                "software_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 22,
                    "pattern": "^[0-9a-zA-Z]{1,22}$"
                },
                "scope": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                },
                "software_statement": {
                    "type": "string",
                    "format": "JWT"
                },
                "application_type": {
                    "type": "string",
                    "enum": [
                        "web",
                        "mobile"
                    ]
                },
                "id_token_signed_response_alg": {
                    "$ref": "#/definitions/SupportedAlgorithms"
                },
                "request_object_signing_alg": {
                    "$ref": "#/definitions/SupportedAlgorithms"
                },
                "token_endpoint_auth_signing_alg": {
                    "$ref": "#/definitions/SupportedAlgorithms"
                },
                "tls_client_auth_subject_dn": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128
                }
            }
        },
        "OBClientRegistration1": {
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "aud",
                        "exp",
                        "iat",
                        "iss",
                        "jti"
                    ],
                    "properties": {
                        "iss": {
                            "type": "string",
                            "description": "Unique identifier for the TPP. Implemented as Base62 encoded GUID",
                            "minLength": 1,
                            "maxLength": 22,
                            "pattern": "^[0-9a-zA-Z]{1,22}$"
                        },
                        "iat": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time at which the request was issued by the TPP  expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC"
                        },
                        "exp": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time at which the request expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC"
                        },
                        "aud": {
                            "type": "string",
                            "description": "The audience for the request. This should be the unique identifier\nfor the ASPSP issued by the issuer of the software statement.\nImplemented as Base62 encoded GUID\n",
                            "minLength": 1,
                            "maxLength": 18,
                            "pattern": "^[0-9a-zA-Z]{1,18}$"
                        },
                        "jti": {
                            "type": "string",
                            "description": "Unique identifier for the JWT implemented as UUID v4",
                            "minLength": 36,
                            "maxLength": 36,
                            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/OBRegistrationProperties1"
                }
            ]
        },
        "RegistrationError": {
            "type": "object",
            "required": [
                "error"
            ],
            "properties": {
                "error": {
                    "type": "string",
                    "enum": [
                        "invalid_redirect_uri",
                        "invalid_client_metadata",
                        "invalid_software_statement",
                        "unapproved_software_statement"
                    ]
                },
                "error_description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500
                }
            }
        }
    },
    "parameters": {
        "Authorization": {
            "name": "Authorization",
            "in": "header",
            "description": "An Authorisation Token as per https://tools.ietf.org/html/rfc6750",
            "required": true,
            "type": "string"
        },
        "ClientId": {
            "name": "ClientId",
            "in": "path",
            "description": "The client ID",
            "required": true,
            "type": "string"
        },
        "ClientRegistration": {
            "in": "body",
            "name": "requestBody",
            "description": "A request to register a Software Statement Assertion with an ASPSP",
            "required": false,
            "schema": {
                "type": "string",
                "format": "OBClientRegistration1"
            }
        }
    },
    "responses": {
        "400Error": {
            "description": "Request failed due to client error",
            "schema": {
                "$ref": "#/definitions/RegistrationError"
            }
        },
        "401Error": {
            "description": "Request failed due to unknown or invalid Client or invalid access token",
            "headers": {
                "WWW-Authenticate": {
                    "type": "string",
                    "description": "Response header field specified in https://tools.ietf.org/html/rfc6750",
                    "pattern": "^Bearer .*"
                }
            }
        },
        "403Error": {
            "description": "The client does not have permission to read, update or delete the Client"
        },
        "405Error": {
            "description": "Method Not Allowed"
        },
        "OBClientRegistration1": {
            "description": "Client registration",
            "schema": {
                "allOf": [
                    {
                        "$ref": "#/definitions/OBRegistrationProperties1"
                    },
                    {}
                ]
            }
        }
    }
}